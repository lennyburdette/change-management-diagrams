steps:
  - title: Perform the deprecation process for elements to remove/change
    states:
      task-deprecation: { type: ACTIVE }
  - title: Determine which clients use the affected elements and update their operations
    states:
      task-deprecation: { type: COMPLETE }
      task-update-clients: { type: ACTIVE }
      client: { type: ACTIVE }
  - title: Merge pull request to the Products repository containing both schema and code changes
    states:
      task-update-clients: { type: COMPLETE }
      task-merge-pr: { type: ACTIVE }
      client: { type: DEFAULT }
  - title: 'Run prerelease steps: tests and schema checks'
    description: |
      Schema checks use the schema registry in Studio to ensure that the new
      subgraph schema composes with other subgraphs.
    states:
      task-merge-pr: { type: COMPLETE }
      task-run-tests: { type: ACTIVE }
      task-run-checks: { type: ACTIVE }
      studio: { type: ACTIVE }
  - title: 'Build artifacts for release: the subgraph schema for publishing to Studio, and the deployable artifact for the Products servers'
    states:
      task-run-tests: { type: COMPLETE }
      task-run-checks: { type: COMPLETE }
      task-build-schema: { type: ACTIVE, schema: B }
      task-build-deployable: { type: ACTIVE, code: 3 }
      studio: { type: DEFAULT }
  - title: Publish the subgraph schema to the "prod" variant in Apollo Studio
    states:
      task-build-schema: { type: COMPLETE, schema: B }
      task-build-deployable: { type: COMPLETE, code: 3 }
      task-publish-to-prod: { type: ACTIVE }
      studio: { type: ACTIVE }
  - title: Studio generates a new supergraph which propagates to the Gateway servers
    description: |
      At this point, the Gateway will no longer accept requests that include the
      changed/removed schema elements. If we've gone through the appropriate
      deprecation lifecycle and observed that client usage of these elements has
      dropped to an acceptable level, this will not be an issue.
    states:
      studio: { type: ACTIVE }
      gateway-blue: { type: SCHEMA, schema: BX, active: true }
  - title: Initiate a rolling deploy of Products subgraph
    states:
      task-publish-to-prod: { type: COMPLETE }
      task-initiate-deployment: { type: ACTIVE }
      studio: { type: DEFAULT }
      gateway-blue: { type: SCHEMA, schema: BX, active: false }
      subgraph-a: { type: ROLLING_DEPLOY, schema: B, code: 3 }
  - title: Client requests without the changed/removed schema elements continue to work.
    states:
      task-initiate-deployment: { type: COMPLETE }
      client: { type: ACTIVE }
      subgraph-a: { type: DEPLOY, schema: B, code: 3 }
tasks:
  - - id: task-deprecation
      label: Deprecate Schema
  - - id: task-update-clients
      label: Update Clients
  - - id: 'task-merge-pr'
      label: 'Merge PR'
  - - id: 'task-run-tests'
      label: 'Run Tests'
    - id: 'task-run-checks'
      label: 'Run Checks'
  - - id: 'task-build-schema'
      label: 'Build Schema'
      icon: true
    - id: 'task-build-deployable'
      label: 'Build Deployable'
      icon: true
  - - id: 'task-publish-to-prod'
      label: 'Publish to prod'
    - id: 'task-initiate-deployment'
      label: 'Initiate Deployment'
lines:
  - { id: 'A', from: 'client', to: 'gateway-blue', after: '0s;Fanim.end' }
  - { id: 'C', from: 'gateway-blue', to: 'subgraph-a', after: 'Aanim.end' }
  - { id: 'D', from: 'gateway-blue', to: 'subgraph-b', after: 'Aanim.end' }
  - { id: 'E', from: 'subgraph-a', to: 'database', after: 'Canim.end' }
  - { id: 'F', from: 'subgraph-b', to: 'rest', after: 'Danim.end' }
  - { id: 'G', from: 'studio', to: 'gateway-blue', fromAnchor: 'B', toAnchor: 'T' }
boxes:
  - contain: ['lb', 'gateway-blue', 'gateway-green', 'subgraph-a', 'subgraph-b', 'database', 'rest']
    p: 12
    pt: 28
